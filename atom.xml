<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://kioipp.cn</id>
    <title>自留地</title>
    <updated>2020-10-19T04:52:32.633Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://kioipp.cn"/>
    <link rel="self" href="https://kioipp.cn/atom.xml"/>
    <subtitle>梦里不知身是客，一晌贪欢。</subtitle>
    <logo>https://kioipp.cn/images/avatar.png</logo>
    <icon>https://kioipp.cn/favicon.ico</icon>
    <rights>All rights reserved 2020, 自留地</rights>
    <entry>
        <title type="html"><![CDATA[manage.py: 简明好用的 CLI builder]]></title>
        <id>https://kioipp.cn/post/managepy-jian-ming-hao-yong-de-cli-builder/</id>
        <link href="https://kioipp.cn/post/managepy-jian-ming-hao-yong-de-cli-builder/">
        </link>
        <updated>2020-10-19T03:16:05.000Z</updated>
        <summary type="html"><![CDATA[<p>&quot;CLI is everything.&quot;</p>
]]></summary>
        <content type="html"><![CDATA[<p>&quot;CLI is everything.&quot;</p>
<!-- more -->
<h2 id="pip-官方项目地址">PIP 官方项目地址</h2>
<blockquote>
<p>https://pypi.org/project/manage.py/  （含官方用例）</p>
</blockquote>
<h2 id="安装">安装</h2>
<pre><code class="language-bash">pip install mange.py
</code></pre>
<h2 id="使用">使用</h2>
<h3 id="1创建命令">1.创建命令</h3>
<pre><code class="language-python">from manager import Manager

manager_echo = Manager()


@manager_echo.command
def echo_with_no_args():
    &quot;&quot;&quot;Command description, will show on command line.
    &quot;&quot;&quot;
    print(&quot;Hello&quot;)


if __name__ == '__main__':
    manager_echo.main()
</code></pre>
<pre><code class="language-bash">$ python3 cli_sample.py
usage: cli_sample.py &lt;command&gt; [&lt;args&gt;]

positional arguments:
  command     the command to run

optional arguments:
  -h, --help  show this help message and exit

available commands:
  echo_with_no_args        Command description, will show on command line.
</code></pre>
<pre><code class="language-bash">$ python3 cli_sample.py echo_with_no_args
Hello
</code></pre>
<hr>
<h3 id="2-多重-namepspace-管理">2. 多重 namepspace 管理</h3>
<pre><code class="language-python">from manager import Manager
import time

manager_echo = Manager()
manager_ops = Manager()
manager_main = Manager()

manager_main.merge(manager_echo, namespace='echo')
manager_main.merge(manager_ops, namespace='ops')


@manager_echo.command
def echo_with_no_args():
    &quot;&quot;&quot;Command description, will show on command line.
    &quot;&quot;&quot;
    print(&quot;Hello&quot;)


@manager_ops.command
def ops_with_no_args():
    &quot;&quot;&quot;Do some operation without args.
    &quot;&quot;&quot;
    print(time.time() + 1.0)


manager_main.merge(manager_echo, namespace='echo')
manager_main.merge(manager_ops, namespace='ops')

if __name__ == '__main__':
    manager_main.main()
</code></pre>
<pre><code class="language-bash">python3 cli_sample.py
usage: cli_sample.py [&lt;namespace&gt;.]&lt;command&gt; [&lt;args&gt;]

positional arguments:
  command     the command to run

optional arguments:
  -h, --help  show this help message and exit

available commands:

  [echo]
    echo_with_no_args      Command description, will show on command line.


  [ops]
    ops_with_no_args       Do some operation without args.
</code></pre>
<pre><code class="language-bash">python3 cli_sample.py ops.ops_with_no_args
1603078473.9244218
</code></pre>
<hr>
<h3 id="3不带提示-按照顺序输入的参数">3.不带提示、按照顺序输入的参数</h3>
<pre><code class="language-python">@manager_echo.command
def echo_with_args(name, pid):
    &quot;&quot;&quot;Echo given &lt;params&gt;
    &quot;&quot;&quot;
    print(f'Name is {name}, PID is {pid}')
</code></pre>
<pre><code class="language-bash">$ python3 cli_sample.py echo.echo_with_args  test 77
Name is test, PID is 77
</code></pre>
<hr>
<h3 id="4带提示的顺序输入的参数">4.带提示的顺序输入的参数</h3>
<pre><code class="language-python">@manager_echo.arg('name', help='User\'s name')
@manager_echo.arg('pid', help='App\'s PID')
@manager_echo.command
def echo_with_args(name, pid):
    &quot;&quot;&quot;Echo given &lt;params&gt;
    &quot;&quot;&quot;
    print(f'Name is {name}, PID is {pid}')
</code></pre>
<pre><code class="language-bash">$ python3 cli_sample.py echo.echo_with_args -h
usage: cli_sample.py echo.echo_with_args [-h] name pid

Echo given &lt;params&gt;

positional arguments:
  name        User's name
  pid         App's PID

optional arguments:
  -h, --help  show this help message and exit
</code></pre>
<hr>
<h3 id="5-必要参数和非必要参数的提示输入">5. 必要参数和非必要参数的提示输入</h3>
<pre><code class="language-python">@manager_echo.arg('name', help='User\'s name')
@manager_echo.arg('pid', help='App\'s PID')
@manager_echo.command
def echo_with_args(name, pid=''):
    &quot;&quot;&quot;Echo given &lt;params&gt;
    &quot;&quot;&quot;
    print(f'Name is {name}, PID is {pid}')
</code></pre>
<pre><code class="language-bash">$ python3 cli_sample.py echo.echo_with_args -h
usage: cli_sample.py echo.echo_with_args [-h] [--name NAME] [--pid PID]

Echo given &lt;params&gt;

optional arguments:
  -h, --help   show this help message and exit
  --name NAME  User's name
  --pid PID    App's PID
</code></pre>
<pre><code class="language-bash">$ temp python3 cli_sample.py echo.echo_with_args 123
Name is 123, PID is
$ temp python3 cli_sample.py echo.echo_with_args 123 --pid 777
Name is 123, PID is 777
</code></pre>
<hr>
<p>或者作为布尔值使用：</p>
<pre><code class="language-python">@manager_echo.arg('name', help='User\'s name')
@manager_echo.arg('pid', help='App\'s PID')
@manager_echo.command
def echo_with_args(name, pid=False):
    &quot;&quot;&quot;Echo given &lt;params&gt;
    &quot;&quot;&quot;
    if pid:
        print(f'Name is {name}, PID exists')
    else:
        print(f'Name is {name}, PID not exists')
</code></pre>
<hr>
<pre><code class="language-bash">$ python3 cli_sample.py echo.echo_with_args batman
Name is batman, PID not exists
$ python3 cli_sample.py echo.echo_with_args batman --pid
Name is batman, PID exists
</code></pre>
<hr>
<h3 id="6参数-shortcuts">6.参数 shortcuts</h3>
<pre><code class="language-python">@manager_echo.arg('name', shortcut='n', help='User\'s name')
@manager_echo.arg('pid', shortcut='p', help='App\'s PID')
@manager_echo.command
def echo_with_args(name, pid=False):
    &quot;&quot;&quot;Echo given &lt;params&gt;
    &quot;&quot;&quot;
    if pid:
        print(f'Name is {name}, PID exists')
    else:
        print(f'Name is {name}, PID not exists')
</code></pre>
<hr>
<pre><code class="language-bash">$ python3 cli_sample.py echo.echo_with_args batman --p
Name is batman, PID exists
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SFM(状态机)轮子：transitions 学习]]></title>
        <id>https://kioipp.cn/post/python-sfmzhuang-tai-ji-lun-zi-transitions-xue-xi/</id>
        <link href="https://kioipp.cn/post/python-sfmzhuang-tai-ji-lun-zi-transitions-xue-xi/">
        </link>
        <updated>2020-10-15T07:43:20.000Z</updated>
        <content type="html"><![CDATA[<p>从同事写的一个工具里发现了这个库，能适用很多需要状态管理的场景，作者写的 Code Samples 更有意思。特此记录并写下学习这个库时候的心得。</p>
<h2 id="蝙蝠侠快速示范">蝙蝠侠快速示范</h2>
<pre><code class="language-python">from transitions import Machine
import random

class NarcolepticSuperhero(object):

    # Define some states. Most of the time, narcoleptic superheroes are just like
    # everyone else. Except for...
    &quot;&quot;&quot;定义一个超级英雄的日常行为状态
    &quot;&quot;&quot;
    states = ['asleep', 'hanging out', 'hungry', 'sweaty', 'saving the world']

    def __init__(self, name):

        # No anonymous superheroes on my watch! Every narcoleptic superhero gets
        # a name. Any name at all. SleepyMan. SlumberGirl. You get the idea.
        ## 哪怕是叫小强，超级英雄也是需要一个响亮的名字
        self.name = name

        # What have we accomplished today?
        ## 超级英雄日常拯救小猫任务计数 0/999999
        self.kittens_rescued = 0

        # Initialize the state machine
        ## 超级英雄的一天从睡觉开始（雾
        self.machine = Machine(model=self, states=NarcolepticSuperhero.states, initial='asleep')

        # Add some transitions. We could also define these using a static list of
        # dictionaries, as we did with states above, and then pass the list to
        # the Machine initializer as the transitions= argument.

        ## 给超级英雄添加一系列任务，这样就能让超级英雄从起床刷牙到拯救地球了
        # At some point, every superhero must rise and shine.
        self.machine.add_transition(trigger='wake_up', source='asleep', dest='hanging out')

        # Superheroes need to keep in shape.
        self.machine.add_transition('work_out', 'hanging out', 'hungry')

        # Those calories won't replenish themselves!
        self.machine.add_transition('eat', 'hungry', 'hanging out')

        # Superheroes are always on call. ALWAYS. But they're not always
        # dressed in work-appropriate clothing.

        ## 超级英雄可以从任何时候进行拯救世界状态，但需要先穿上赞助商定制战衣～
        self.machine.add_transition('distress_call', '*', 'saving the world',
                         before='change_into_super_secret_costume')

        # When they get off work, they're all sweaty and disgusting. But before
        # they do anything else, they have to meticulously log their latest
        # escapades. Because the legal department says so.
        ## 在完成任务后，主机会自动给超级英雄记上一笔小红花
        self.machine.add_transition('complete_mission', 'saving the world', 'sweaty',
                         after='update_journal')

        # Sweat is a disorder that can be remedied with water.
        # Unless you've had a particularly long day, in which case... bed time!
        ## 入睡前必须洗澡，除非超级英雄今天压根就没出门……（即使这样也要洗澡的吧喂！难道超级英雄是北方人吗？
        self.machine.add_transition('clean_up', 'sweaty', 'asleep', conditions=['is_exhausted'])
        self.machine.add_transition('clean_up', 'sweaty', 'hanging out')

        # Our NarcolepticSuperhero can fall asleep at pretty much any time.
        ## 没错！超级英雄任何时候都能入睡！
        self.machine.add_transition('nap', '*', 'asleep')

    def update_journal(self):
        &quot;&quot;&quot; Dear Diary, today I saved Mr. Whiskers. Again. &quot;&quot;&quot;
        self.kittens_rescued += 1

    @property
    def is_exhausted(self):
        &quot;&quot;&quot; Basically a coin toss. &quot;&quot;&quot;
        return random.random() &lt; 0.5

    def change_into_super_secret_costume(self):
        print(&quot;Beauty, eh?&quot;)

</code></pre>
<p>下面我们有请蝙蝠侠进行超级英雄示范 👏</p>
<pre><code class="language-bash">&gt;&gt;&gt; batman = NarcolepticSuperhero(&quot;Batman&quot;)
&gt;&gt;&gt; batman.state
'asleep'

&gt;&gt;&gt; batman.wake_up()
&gt;&gt;&gt; batman.state
'hanging out'

&gt;&gt;&gt; batman.nap()
&gt;&gt;&gt; batman.state
'asleep'

&gt;&gt;&gt; batman.clean_up()
MachineError: &quot;Can't trigger event clean_up from state asleep!&quot;

&gt;&gt;&gt; batman.wake_up()
&gt;&gt;&gt; batman.work_out()
&gt;&gt;&gt; batman.state
'hungry'

# Batman still hasn't done anything useful...
&gt;&gt;&gt; batman.kittens_rescued
0

# We now take you live to the scene of a horrific kitten entreement...
&gt;&gt;&gt; batman.distress_call()
'Beauty, eh?'
&gt;&gt;&gt; batman.state
'saving the world'

# Back to the crib.
&gt;&gt;&gt; batman.complete_mission()
&gt;&gt;&gt; batman.state
'sweaty'

&gt;&gt;&gt; batman.clean_up()
&gt;&gt;&gt; batman.state
'asleep'   # Too tired to shower!

# Another productive day, Alfred.
&gt;&gt;&gt; batman.kittens_rescued
1
</code></pre>
<p>TOBE Continued .</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[2020.10.12]]></title>
        <id>https://kioipp.cn/post/20201012/</id>
        <link href="https://kioipp.cn/post/20201012/">
        </link>
        <updated>2020-10-12T07:59:20.000Z</updated>
        <content type="html"><![CDATA[<p>深圳非常难得地出现了秋天。</p>
<p>摸鱼摸出了轻微的焦虑。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://kioipp.cn/post/hello-gridea/</id>
        <link href="https://kioipp.cn/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>